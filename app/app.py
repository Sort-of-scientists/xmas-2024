import streamlit as st
import pandas as pd
import os

def check_and_load_csv(file):
    """Check if the uploaded file is a CSV and load it."""
    if file is not None:
        _, ext = os.path.splitext(file.name)
        if ext.lower() == '.csv':
            try:
                return pd.read_csv(file)
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ CSV —Ñ–∞–π–ª–∞: {e}")
                return None
        else:
            st.error("–¢–æ–ª—å–∫–æ CSV —Ñ–∞–π–ª—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã!")
            return None
    return None


# Theme Configuration
st.set_page_config(page_title="CSV File Loader", layout="wide", page_icon="üìä")

st.markdown(
    """
<style>
button {
    height: auto;
    padding-top: 15px !important;
    padding-bottom: 10px !important;
}
</style>
""",
    unsafe_allow_html=True,
)

# Main Header
st.header("üìà Data Management Dashboard")

# Sidebar Content
# with st.sidebar:
#     st.subheader("üîß –í—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:")
#     strategy = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é:", ["–í—Ä–µ–º—è", "–ü—Ä–∏–±—ã–ª—å"])
#     st.markdown(f"–í—ã–±—Ä–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: **{strategy.split('(')[0].strip()}**")
#     st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ **.csv** —Ñ–∞–π–ª—ã, –∞ —Ç–∞–∫–∂–µ –≤—ã–±–µ—Ä–∏—Ç–µ **—Å—Ç—Ä–∞—Ç–µ–≥–∏—é**")


# Create three columns for file uploaders
# col0, col1, col2, col3 = st.rows(4)


with st.container():
    with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é"):
        st.write('''
        –û—Ö–∞–ø–∫–∞ –¥—Ä–æ–≤ –∏ –ø–ª–æ–≤ –≥–æ—Ç–æ–≤
        ''')
        st.image("https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSaqmkIlh_VDaMu8lr10CBb_Q9EyKoOT89EJA&s")

    st.subheader("üîß –í—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:")
    strategy = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é:", ["–í—Ä–µ–º—è", "–ü—Ä–∏–±—ã–ª—å"], key='strategy')
    st.markdown(f"–í—ã–±—Ä–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: **{strategy.split('(')[0].strip()}**")
    st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ **.csv** —Ñ–∞–π–ª—ã, –∞ —Ç–∞–∫–∂–µ –≤—ã–±–µ—Ä–∏—Ç–µ **—Å—Ç—Ä–∞—Ç–µ–≥–∏—é**")

    col1, col2, col3 = st.columns(3)

    with col1:
        st.subheader("üí± Exchange Rates")
        ex_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Exchange Rates CSV", key="ex_rates", type=['csv'])
        if ex_file:
            with st.spinner("–ò–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞..."):
                exchange_rates = check_and_load_csv(ex_file)
                if exchange_rates is not None:
                    st.dataframe(exchange_rates.head().style.format(), use_container_width=True)

    with col2:
        st.subheader("üí∏ Payments")
        payments_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Payments CSV", key="payments", type=['csv'])
        if payments_file:
            with st.spinner("–ò–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞..."):
                payments = check_and_load_csv(payments_file)
                if payments is not None:
                    st.dataframe(payments.head().style.format(), use_container_width=True)

    with col3:
        st.subheader("üè¢ Providers")
        providers_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Providers CSV", key="providers", type=['csv'])
        if providers_file:
            with st.spinner("–ò–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞..."):
                providers = check_and_load_csv(providers_file)
                if providers is not None:
                    st.dataframe(providers.head().style.format(), use_container_width=True)

    _, middle, _ = st.columns(3)
    if middle.button("–í—ã–ø–æ–ª–Ω–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é!", icon="üòÉ", use_container_width=True):
        middle.markdown("You clicked the emoji button.")